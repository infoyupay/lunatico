package com.yupay.lunatico.fxmview;

import com.yupay.lunatico.model.ModelView;
import com.yupay.lunatico.model.Movement;
import com.yupay.lunatico.model.MovementType;
import javafx.beans.property.*;
import javafx.collections.ObservableList;
import org.jetbrains.annotations.NotNull;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Objects;

import static javafx.collections.FXCollections.observableArrayList;

/**
 * JavaFX model view implementation for Movement.
 *
 * @author InfoYupay SACS
 * @version 1.0
 */
public class FxMovementMV extends ModelView<Movement, FxMovementMV> {
    /**
     * ID of movement (autogenerated).
     */
    private final LongProperty id =
            new SimpleLongProperty(this, "id");
    /**
     * Warehouse.
     */
    private final ObjectProperty<FxWarehouseMV> warehouse =
            new SimpleObjectProperty<>(this, "warehouse");
    /**
     * Type of movement.
     */
    private final ObjectProperty<MovementType> type =
            new SimpleObjectProperty<>(this, "type");
    /**
     * Date of folio/document.
     */
    private final ObjectProperty<LocalDate> docDate =
            new SimpleObjectProperty<>(this, "docDate");
    /**
     * Date of the record.
     */
    private final ObjectProperty<LocalDateTime> ownDate =
            new SimpleObjectProperty<>(this, "ownDate");
    /**
     * Person linked to the movement.
     */
    private final ObjectProperty<FxPersonMV> person =
            new SimpleObjectProperty<>(this, "person");
    /**
     * Type of folio.
     */
    private final ObjectProperty<FxFolioTypeMV> folioType =
            new SimpleObjectProperty<>(this, "folioType");
    /**
     * Folio series.
     */
    private final StringProperty folioSerie =
            new SimpleStringProperty(this, "folioSerie");
    /**
     * Folio number.
     */
    private final StringProperty folioNumber =
            new SimpleStringProperty(this, "folioNumber");
    /**
     * Owner (user)
     */
    private final ObjectProperty<FxUserMV> owner =
            new SimpleObjectProperty<>(this, "owner");
    /**
     * Notes to the movement.
     */
    private final StringProperty notes =
            new SimpleStringProperty(this, "notes");
    /**
     * Lines of detail for movement.
     */
    private final ListProperty<FxMovementLineMV> detail =
            new SimpleListProperty<>(this, "detail", observableArrayList());

    /**
     * Constructor to copy information from a model entity.
     *
     * @param model the model entity.
     */
    public FxMovementMV(@NotNull Movement model) {
        fromModel(model);
    }

    /**
     * Default no-op constructor.
     */
    public FxMovementMV() {
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #id}.get();
     */
    public final long getId() {
        return id.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param id value to assign into {@link #id}.
     */
    public final void setId(long id) {
        this.id.set(id);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #id}.
     */
    public final LongProperty idProperty() {
        return id;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #warehouse}.get();
     */
    public final FxWarehouseMV getWarehouse() {
        return warehouse.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param warehouse value to assign into {@link #warehouse}.
     */
    public final void setWarehouse(FxWarehouseMV warehouse) {
        this.warehouse.set(warehouse);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #warehouse}.
     */
    public final ObjectProperty<FxWarehouseMV> warehouseProperty() {
        return warehouse;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #type}.get();
     */
    public final MovementType getType() {
        return type.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param type value to assign into {@link #type}.
     */
    public final void setType(MovementType type) {
        this.type.set(type);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #type}.
     */
    public final ObjectProperty<MovementType> typeProperty() {
        return type;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #docDate}.get();
     */
    public final LocalDate getDocDate() {
        return docDate.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param docDate value to assign into {@link #docDate}.
     */
    public final void setDocDate(LocalDate docDate) {
        this.docDate.set(docDate);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #docDate}.
     */
    public final ObjectProperty<LocalDate> docDateProperty() {
        return docDate;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #ownDate}.get();
     */
    public final LocalDateTime getOwnDate() {
        return ownDate.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param ownDate value to assign into {@link #ownDate}.
     */
    public final void setOwnDate(LocalDateTime ownDate) {
        this.ownDate.set(ownDate);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #ownDate}.
     */
    public final ObjectProperty<LocalDateTime> ownDateProperty() {
        return ownDate;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #person}.get();
     */
    public final FxPersonMV getPerson() {
        return person.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param person value to assign into {@link #person}.
     */
    public final void setPerson(FxPersonMV person) {
        this.person.set(person);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #person}.
     */
    public final ObjectProperty<FxPersonMV> personProperty() {
        return person;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #folioType}.get();
     */
    public final FxFolioTypeMV getFolioType() {
        return folioType.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param folioType value to assign into {@link #folioType}.
     */
    public final void setFolioType(FxFolioTypeMV folioType) {
        this.folioType.set(folioType);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #folioType}.
     */
    public final ObjectProperty<FxFolioTypeMV> folioTypeProperty() {
        return folioType;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #folioSerie}.get();
     */
    public final String getFolioSerie() {
        return folioSerie.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param folioSerie value to assign into {@link #folioSerie}.
     */
    public final void setFolioSerie(String folioSerie) {
        this.folioSerie.set(folioSerie);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #folioSerie}.
     */
    public final StringProperty folioSerieProperty() {
        return folioSerie;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #folioNumber}.get();
     */
    public final String getFolioNumber() {
        return folioNumber.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param folioNumber value to assign into {@link #folioNumber}.
     */
    public final void setFolioNumber(String folioNumber) {
        this.folioNumber.set(folioNumber);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #folioNumber}.
     */
    public final StringProperty folioNumberProperty() {
        return folioNumber;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #owner}.get();
     */
    public final FxUserMV getOwner() {
        return owner.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param owner value to assign into {@link #owner}.
     */
    public final void setOwner(FxUserMV owner) {
        this.owner.set(owner);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #owner}.
     */
    public final ObjectProperty<FxUserMV> ownerProperty() {
        return owner;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #notes}.get();
     */
    public final String getNotes() {
        return notes.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param notes value to assign into {@link #notes}.
     */
    public final void setNotes(String notes) {
        this.notes.set(notes);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #notes}.
     */
    public final StringProperty notesProperty() {
        return notes;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #detail}.get();
     */
    public final ObservableList<FxMovementLineMV> getDetail() {
        return detail.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param detail value to assign into {@link #detail}.
     */
    public final void setDetail(ObservableList<FxMovementLineMV> detail) {
        this.detail.set(detail);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #detail}.
     */
    public final ListProperty<FxMovementLineMV> detailProperty() {
        return detail;
    }

    @Override
    public boolean equals(Object o) {
        return this == o || o instanceof FxMovementMV that &&
                getId() == that.getId();
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }

    @Override
    public @NotNull FxMovementMV deepCopy() {
        var r = new FxMovementMV();
        r.setDocDate(getDocDate());
        r.setFolioNumber(getFolioNumber());
        r.setFolioSerie(getFolioSerie());
        if (getFolioType() != null) {
            r.setFolioType(getFolioType().deepCopy());
        }
        r.setId(getId());
        r.setNotes(getNotes());
        r.setOwnDate(getOwnDate());
        if (getOwner() != null) {
            r.setOwner(getOwner().deepCopy());
        }
        if (getPerson() != null) {
            r.setPerson(getPerson().deepCopy());
        }
        r.setType(getType());
        if (getWarehouse() != null) {
            r.setWarehouse(getWarehouse().deepCopy());
        }
        if (getDetail() != null) {
            getDetail().stream()
                    .map(FxMovementLineMV::deepCopy)
                    .forEach(r.getDetail()::add);
        }
        return r;
    }

    @Override
    public @NotNull Movement toModel() {
        var r = new Movement();
        r.setDocDate(getDocDate());
        r.setFolioNumber(getFolioNumber());
        r.setFolioSerie(getFolioSerie());
        if (getFolioType() != null) {
            r.setFolioType(getFolioType().toModel());
        }
        r.setId(getId());
        r.setNotes(getNotes());
        r.setOwnDate(getOwnDate());
        if (getOwner() != null) {
            r.setOwner(getOwner().toModel());
        }
        if (getPerson() != null) {
            r.setPerson(getPerson().toModel());
        }
        r.setType(getType());
        if (getWarehouse() != null) {
            r.setWarehouse(getWarehouse().toModel());
        }
        if (getDetail() != null) {
            var lsDetail = getDetail().stream()
                    .map(FxMovementLineMV::toModel)
                    .toList();
            r.setDetail(lsDetail);
        }
        return r;
    }

    @Override
    public void fromModel(@NotNull Movement m) {
        setDocDate(m.getDocDate());
        setFolioNumber(m.getFolioNumber());
        setFolioSerie(m.getFolioSerie());
        if (m.getFolioType() != null) {
            setFolioType(new FxFolioTypeMV(m.getFolioType()));
        }
        setId(m.getId());
        setNotes(m.getNotes());
        setOwnDate(m.getOwnDate());
        if (m.getOwner() != null) {
            setOwner(new FxUserMV(m.getOwner()));
        }
        if (m.getPerson() != null) {
            setPerson(new FxPersonMV(m.getPerson()));
        }
        setType(m.getType());
        if (m.getWarehouse() != null) {
            setWarehouse(new FxWarehouseMV(m.getWarehouse()));
        }
        if (m.getDetail() != null) {
            m.getDetail().stream()
                    .map(FxMovementLineMV::new)
                    .forEach(detail::add);
        }
    }
}
