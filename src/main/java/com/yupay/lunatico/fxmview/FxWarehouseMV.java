package com.yupay.lunatico.fxmview;

import com.yupay.lunatico.model.ModelView;
import com.yupay.lunatico.model.VirtualWarehouseType;
import com.yupay.lunatico.model.Warehouse;
import javafx.beans.property.*;
import org.jetbrains.annotations.NotNull;

import java.util.Objects;

public class FxWarehouseMV extends ModelView<Warehouse, FxWarehouseMV> {
    /**
     * The autogenerated ID.
     */
    private final LongProperty id =
            new SimpleLongProperty(this, "id");
    /**
     * The name of the warehouse.
     */
    private final StringProperty name =
            new SimpleStringProperty(this, "name");
    /**
     * The virtual type of the warehouse.
     */
    private final ObjectProperty<VirtualWarehouseType> virtualType =
            new SimpleObjectProperty<>(this, "virtualType");
    /**
     * Holds true if this is an active warehouse.
     */
    private final BooleanProperty active =
            new SimpleBooleanProperty(this, "active");

    /**
     * Constructor to copy information from a model entity.
     *
     * @param model the model entity.
     */
    public FxWarehouseMV(@NotNull Warehouse model) {
        fromModel(model);
    }

    /**
     * Default no-op constructor.
     */
    public FxWarehouseMV() {
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #id}.get();
     */
    public final long getId() {
        return id.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param id value to assign into {@link #id}.
     */
    public final void setId(long id) {
        this.id.set(id);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #id}.
     */
    public final LongProperty idProperty() {
        return id;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #name}.get();
     */
    public final String getName() {
        return name.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param name value to assign into {@link #name}.
     */
    public final void setName(String name) {
        this.name.set(name);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #name}.
     */
    public final StringProperty nameProperty() {
        return name;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #virtualType}.get();
     */
    public final VirtualWarehouseType getVirtualType() {
        return virtualType.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param virtualType value to assign into {@link #virtualType}.
     */
    public final void setVirtualType(VirtualWarehouseType virtualType) {
        this.virtualType.set(virtualType);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #virtualType}.
     */
    public final ObjectProperty<VirtualWarehouseType> virtualTypeProperty() {
        return virtualType;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #active}.get();
     */
    public final boolean isActive() {
        return active.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param active value to assign into {@link #active}.
     */
    public final void setActive(boolean active) {
        this.active.set(active);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #active}.
     */
    public final BooleanProperty activeProperty() {
        return active;
    }

    @Override
    public boolean equals(Object o) {
        return this == o || o instanceof FxWarehouseMV that &&
                getId() == that.getId();
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }

    @Override
    public @NotNull FxWarehouseMV deepCopy() {
        var r = new FxWarehouseMV();
        r.setActive(isActive());
        r.setId(getId());
        r.setName(getName());
        r.setVirtualType(getVirtualType());
        return r;
    }

    @Override
    public @NotNull Warehouse toModel() {
        var r = new Warehouse();
        r.setActive(isActive());
        r.setId(getId());
        r.setName(getName());
        r.setVirtualType(getVirtualType());
        return r;
    }

    @Override
    public void fromModel(@NotNull Warehouse model) {
        setActive(model.isActive());
        setId(model.getId());
        setName(model.getName());
        setVirtualType(model.getVirtualType());
    }
}
