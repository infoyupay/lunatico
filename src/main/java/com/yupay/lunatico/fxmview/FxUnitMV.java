package com.yupay.lunatico.fxmview;

import com.yupay.lunatico.model.ModelView;
import com.yupay.lunatico.model.Unit;
import javafx.beans.property.*;
import org.jetbrains.annotations.NotNull;

import java.util.Objects;

/**
 * JavaFX Model view implementation for measurement units.
 *
 * @author InfoYupay SACS
 * @version 1.0
 */
public class FxUnitMV extends ModelView<Unit, FxUnitMV> {
    /**
     * Autogenerated ID.
     */
    private final LongProperty id =
            new SimpleLongProperty(this, "id");
    /**
     * The unit tag.
     */
    private final StringProperty tag =
            new SimpleStringProperty(this, "tag");
    /**
     * The unit symbol.
     */
    private final StringProperty symbol =
            new SimpleStringProperty(this, "symbol");
    /**
     * Active flag, if it's false the entity should be ignored.
     */
    private final BooleanProperty active =
            new SimpleBooleanProperty(this, "active");

    /**
     * Constructor to copy information from a model entity.
     *
     * @param model the model entity.
     */
    public FxUnitMV(@NotNull Unit model) {
        fromModel(model);
    }

    /**
     * Default no-op constructor.
     */
    public FxUnitMV() {
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #id}.get();
     */
    public final long getId() {
        return id.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param id value to assign into {@link #id}.
     */
    public final void setId(long id) {
        this.id.set(id);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #id}.
     */
    public final LongProperty idProperty() {
        return id;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #tag}.get();
     */
    public final String getTag() {
        return tag.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param tag value to assign into {@link #tag}.
     */
    public final void setTag(String tag) {
        this.tag.set(tag);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #tag}.
     */
    public final StringProperty tagProperty() {
        return tag;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #symbol}.get();
     */
    public final String getSymbol() {
        return symbol.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param symbol value to assign into {@link #symbol}.
     */
    public final void setSymbol(String symbol) {
        this.symbol.set(symbol);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #symbol}.
     */
    public final StringProperty symbolProperty() {
        return symbol;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #active}.get();
     */
    public final boolean isActive() {
        return active.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param active value to assign into {@link #active}.
     */
    public final void setActive(boolean active) {
        this.active.set(active);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #active}.
     */
    public final BooleanProperty activeProperty() {
        return active;
    }

    @Override
    public @NotNull FxUnitMV deepCopy() {
        var r = new FxUnitMV();
        r.setActive(isActive());
        r.setId(getId());
        r.setSymbol(getSymbol());
        r.setTag(getTag());
        return r;
    }

    @Override
    public @NotNull Unit toModel() {
        var r = new Unit();
        r.setActive(isActive());
        r.setId(getId());
        r.setSymbol(getSymbol());
        r.setTag(getTag());
        return r;
    }

    @Override
    public void fromModel(@NotNull Unit model) {
        setActive(model.isActive());
        setId(model.getId());
        setSymbol(model.getSymbol());
        setTag(model.getTag());
    }

    @Override
    public boolean equals(Object o) {
        return this == o || o instanceof FxUnitMV fxUnitMV &&
                getId() == fxUnitMV.getId();
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }

    @Override
    public String toString() {
        return "[" + getSymbol() + "] - " + getTag();
    }
}
