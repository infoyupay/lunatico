/*
 *      This file is part of Lunatico project.
 *
 *     Lunatico is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 *     Foobar is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License along with Foobar. If not, see <https://www.gnu.org/licenses/>.
 */

package com.yupay.lunatico.fxmview;

import com.yupay.lunatico.model.Item;
import com.yupay.lunatico.model.ItemType;
import com.yupay.lunatico.model.ModelView;
import javafx.beans.property.*;
import org.jetbrains.annotations.NotNull;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Objects;

/**
 * The JavaFX model view for Item entities.
 *
 * @author InfoYupay SACS
 * @version 1.0
 */
public class FxItemMV extends ModelView<Item, FxItemMV> {
    /**
     * The autogenerated ID.
     */
    private final LongProperty id =
            new SimpleLongProperty(this, "id");
    /**
     * The name of the item.
     */
    private final StringProperty name =
            new SimpleStringProperty(this, "name");
    /**
     * The type of item.
     */
    private final ObjectProperty<ItemType> type =
            new SimpleObjectProperty<>(this, "type");
    /**
     * The measurement unit.
     */
    private final ObjectProperty<FxUnitMV> unit =
            new SimpleObjectProperty<>(this, "unit");
    /**
     * The total stock.
     */
    private final ObjectProperty<BigDecimal> balanceUnits =
            new SimpleObjectProperty<>(this, "balanceUnits", new BigDecimal("0.00000000"));
    /**
     * Unit cost of the balance.
     */
    private final ObjectProperty<BigDecimal> balanceUnitCost =
            new SimpleObjectProperty<>(this, "balanceUnitCost", new BigDecimal("0.00000000"));
    /**
     * Total cost of the balance.
     */
    private final ObjectProperty<BigDecimal> balanceCost =
            new SimpleObjectProperty<>(this, "balanceCost", new BigDecimal("0.00000000"));
    /**
     * Notes about the item.
     */
    private final StringProperty notes =
            new SimpleStringProperty(this, "notes");
    /**
     * Owner user.
     */
    private final ObjectProperty<FxUserMV> owner =
            new SimpleObjectProperty<>(this, "owner");
    /**
     * Creation timestamp.
     */
    private final ObjectProperty<LocalDateTime> created =
            new SimpleObjectProperty<>(this, "created");
    /**
     * Active flag. Holds false if this should be disregarded.
     */
    private final BooleanProperty active =
            new SimpleBooleanProperty(this, "active");

    /**
     * Default empty constructor.
     */
    public FxItemMV() {
    }

    /**
     * Constructor that invokes {@link #fromModel(Item)}
     *
     * @param model the model entity object.
     */
    public FxItemMV(Item model) {
        fromModel(model);
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #id}.get();
     */
    public final long getId() {
        return id.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param id value to assign into {@link #id}.
     */
    public final void setId(long id) {
        this.id.set(id);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #id}.
     */
    public final LongProperty idProperty() {
        return id;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #name}.get();
     */
    public final String getName() {
        return name.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param name value to assign into {@link #name}.
     */
    public final void setName(String name) {
        this.name.set(name);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #name}.
     */
    public final StringProperty nameProperty() {
        return name;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #type}.get();
     */
    public final ItemType getType() {
        return type.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param type value to assign into {@link #type}.
     */
    public final void setType(ItemType type) {
        this.type.set(type);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #type}.
     */
    public final ObjectProperty<ItemType> typeProperty() {
        return type;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #unit}.get();
     */
    public final FxUnitMV getUnit() {
        return unit.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param unit value to assign into {@link #unit}.
     */
    public final void setUnit(FxUnitMV unit) {
        this.unit.set(unit);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #unit}.
     */
    public final ObjectProperty<FxUnitMV> unitProperty() {
        return unit;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #balanceUnits}.get();
     */
    public final BigDecimal getBalanceUnits() {
        return balanceUnits.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param balanceUnits value to assign into {@link #balanceUnits}.
     */
    public final void setBalanceUnits(BigDecimal balanceUnits) {
        this.balanceUnits.set(balanceUnits);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #balanceUnits}.
     */
    public final ObjectProperty<BigDecimal> balanceUnitsProperty() {
        return balanceUnits;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #balanceUnitCost}.get();
     */
    public final BigDecimal getBalanceUnitCost() {
        return balanceUnitCost.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param balanceUnitCost value to assign into {@link #balanceUnitCost}.
     */
    public final void setBalanceUnitCost(BigDecimal balanceUnitCost) {
        this.balanceUnitCost.set(balanceUnitCost);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #balanceUnitCost}.
     */
    public final ObjectProperty<BigDecimal> balanceUnitCostProperty() {
        return balanceUnitCost;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #balanceCost}.get();
     */
    public final BigDecimal getBalanceCost() {
        return balanceCost.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param balanceCost value to assign into {@link #balanceCost}.
     */
    public final void setBalanceCost(BigDecimal balanceCost) {
        this.balanceCost.set(balanceCost);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #balanceCost}.
     */
    public final ObjectProperty<BigDecimal> balanceCostProperty() {
        return balanceCost;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #notes}.get();
     */
    public final String getNotes() {
        return notes.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param notes value to assign into {@link #notes}.
     */
    public final void setNotes(String notes) {
        this.notes.set(notes);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #notes}.
     */
    public final StringProperty notesProperty() {
        return notes;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #owner}.get();
     */
    public final FxUserMV getOwner() {
        return owner.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param owner value to assign into {@link #owner}.
     */
    public final void setOwner(FxUserMV owner) {
        this.owner.set(owner);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #owner}.
     */
    public final ObjectProperty<FxUserMV> ownerProperty() {
        return owner;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #created}.get();
     */
    public final LocalDateTime getCreated() {
        return created.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param created value to assign into {@link #created}.
     */
    public final void setCreated(LocalDateTime created) {
        this.created.set(created);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #created}.
     */
    public final ObjectProperty<LocalDateTime> createdProperty() {
        return created;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #active}.get();
     */
    public final boolean isActive() {
        return active.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param active value to assign into {@link #active}.
     */
    public final void setActive(boolean active) {
        this.active.set(active);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #active}.
     */
    public final BooleanProperty activeProperty() {
        return active;
    }

    @Override
    public boolean equals(Object o) {
        return this == o || o instanceof FxItemMV fxItemMV &&
                getId() == fxItemMV.getId();
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }

    @SuppressWarnings("DuplicatedCode")
    @Override
    public @NotNull FxItemMV deepCopy() {
        var r = new FxItemMV();
        r.setActive(isActive());
        r.setBalanceCost(getBalanceCost());
        r.setBalanceUnitCost(getBalanceUnitCost());
        r.setBalanceUnits(getBalanceUnits());
        r.setCreated(getCreated());
        r.setId(getId());
        r.setName(getName());
        r.setNotes(getNotes());
        r.setOwner(getOwner());
        r.setType(getType());
        r.setUnit(getUnit());
        return r;
    }

    @SuppressWarnings("DuplicatedCode")
    @Override
    public @NotNull Item toModel() {
        var r = new Item();
        r.setActive(isActive());
        r.setBalanceCost(getBalanceCost());
        r.setBalanceUnitCost(getBalanceUnitCost());
        r.setBalanceUnits(getBalanceUnits());
        r.setCreated(getCreated());
        r.setId(getId());
        r.setName(getName());
        r.setNotes(getNotes());
        r.setOwner(getOwner() == null ? null : getOwner().toModel());
        r.setType(getType());
        r.setUnit(getUnit() == null ? null : getUnit().toModel());
        return r;
    }

    @Override
    public void fromModel(@NotNull Item m) {
        setActive(m.isActive());
        setBalanceCost(m.getBalanceCost());
        setBalanceUnitCost(m.getBalanceUnitCost());
        setBalanceUnits(m.getBalanceUnits());
        setCreated(m.getCreated());
        setId(m.getId());
        setName(m.getName());
        setNotes(m.getNotes());
        if (m.getOwner() != null)
            setOwner(new FxUserMV(m.getOwner()));
        setType(m.getType());
        if (m.getUnit() != null)
            setUnit(new FxUnitMV(m.getUnit()));
    }
}
