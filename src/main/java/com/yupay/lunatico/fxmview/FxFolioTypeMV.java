package com.yupay.lunatico.fxmview;

import com.yupay.lunatico.model.ModelView;
import com.yupay.lunatico.model.TypeFolio;
import javafx.beans.property.*;
import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.NotNull;

import java.util.Objects;

/**
 * JavaFX model view implementation for Folio type entities.
 *
 * @author InfoYupay SACS
 * @version 1.0
 */
public class FxFolioTypeMV
        extends ModelView<TypeFolio, FxFolioTypeMV> {

    /**
     * Autogenerated sequential ID.
     */
    private final LongProperty id =
            new SimpleLongProperty(this, "id");
    /**
     * Name to show to the user.
     */
    private final StringProperty name =
            new SimpleStringProperty(this, "name");
    /**
     * Flag that holds false when an entity is no longer valid.
     */
    private final BooleanProperty active =
            new SimpleBooleanProperty(this, "active");

    /**
     * Constructor to copy information from a model entity.
     *
     * @param model the model entity.
     */
    public FxFolioTypeMV(@NotNull TypeFolio model) {
        fromModel(model);
    }

    /**
     * Default no-op constructor.
     */
    public FxFolioTypeMV() {
    }

    /**
     * Static factory to create a new entity
     * with active flag true. Useful for
     * dialogs and stuff.
     *
     * @return a new active folio type.
     */
    @Contract(pure = true, value = "->new")
    public static @NotNull FxFolioTypeMV blank() {
        var r = new FxFolioTypeMV();
        r.setActive(true);
        return r;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #id}.get();
     */
    public final long getId() {
        return id.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param id value to assign into {@link #id}.
     */
    public final void setId(long id) {
        this.id.set(id);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #id}.
     */
    public final LongProperty idProperty() {
        return id;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #name}.get();
     */
    public final String getName() {
        return name.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param name value to assign into {@link #name}.
     */
    public final void setName(String name) {
        this.name.set(name);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #name}.
     */
    public final StringProperty nameProperty() {
        return name;
    }

    /**
     * FX Accessor - getter.
     *
     * @return value of {@link #active}.get();
     */
    public final boolean isActive() {
        return active.get();
    }

    /**
     * FX Accessor - setter.
     *
     * @param active value to assign into {@link #active}.
     */
    public final void setActive(boolean active) {
        this.active.set(active);
    }

    /**
     * FX Accessor - property.
     *
     * @return property {@link #active}.
     */
    public final BooleanProperty activeProperty() {
        return active;
    }

    @Override
    public @NotNull FxFolioTypeMV deepCopy() {
        var r = new FxFolioTypeMV();
        r.setActive(isActive());
        r.setId(getId());
        r.setName(getName());
        return r;
    }

    @Override
    public @NotNull TypeFolio toModel() {
        var r = new TypeFolio();
        r.setActive(isActive());
        r.setId(getId());
        r.setName(getName());
        return r;
    }

    @Override
    public void fromModel(@NotNull TypeFolio m) {
        setActive(m.isActive());
        setId(m.getId());
        setName(m.getName());
    }

    @Override
    public boolean equals(Object o) {
        return this == o || o instanceof FxFolioTypeMV that &&
                getId() == that.getId();
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }

    @Override
    public String toString() {
        return getName();
    }
}
